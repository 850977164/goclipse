<project name="GoClipse" default="desktop_build">

    <!-- desktop_init -->
    <target name="desktop_init">
        <fail message="please create a ${user.name}_build.properties file to config this build (see sample_build.properties)">
            <condition>
                <not>
                    <available file="${user.name}_build.properties" type="file" />
                </not>
            </condition>
        </fail>
        
        <property file="${user.name}_build.properties" />
		
        <fail unless="build.dir" message="build.dir property is required"/>
        <mkdir dir="${build.dir}"/>
        
        <fail unless="source.dir" message="build.dir property is required"/>
        <fail message="source.dir does not exist: ${source.dir}">
            <condition>
                <not>
                    <available file="${source.dir}" type="dir" />
                </not>
            </condition>
        </fail>
    </target>

    <!-- desktop_clean -->
    <target name="desktop_clean" depends="desktop_init">
        <delete dir="${build.dir}/I.build"/>
        <delete dir="${build.dir}/buildRepo"/>
    	  
        <delete dir="${build.dir}/com.googlecode.goclipse.build_pde"/>
        <delete dir="${build.dir}/features"/>
        <delete dir="${build.dir}/plugins"/>
    	  
        <delete dir="${build.dir}/workspace"/>
    </target>
    
    <!-- desktop_copysources -->
    <target name="desktop_copysources" depends="desktop_init">
        <copy todir="${build.dir}/plugins/goclipse"><fileset dir="${source.dir}/goclipse"/></copy>
        <copy todir="${build.dir}/plugins/com.googlecode.goclipse.gocode"><fileset dir="${source.dir}/com.googlecode.goclipse.gocode"/></copy>
        <copy todir="${build.dir}/plugins/com.googlecode.goclipse.debug"><fileset dir="${source.dir}/com.googlecode.goclipse.debug"/></copy>
        
        <copy todir="${build.dir}/features/goclipse_feature"><fileset dir="${source.dir}/goclipse-feature"/></copy>
        
        <copy todir="${build.dir}/com.googlecode.goclipse.build_pde"><fileset dir="${source.dir}/com.googlecode.goclipse.build_pde"/></copy>
    </target>
    
    <!-- desktop_build -->
    <target name="desktop_build" depends="desktop_init,desktop_copysources,setup,pde_build">
        <!-- all the work is done in the dependent targets -->
    </target>
    
    <!-- jenkins_init -->
    <target name="jenkins_init">
        <property environment="env" />
    
        <!-- echoproperties/ -->
        
        <property name="build.dir" location="${env.WORKSPACE}"/>
        <!-- property name="svn.revision" value="${env.SVN_REVISION_4}"/ -->
    </target>
    
    <!-- jenkins_clean -->
    <target name="jenkins_clean" depends="jenkins_init">
        <delete dir="${build.dir}/I.build"/>
        <delete dir="${build.dir}/buildRepo"/>
        
        <delete dir="${build.dir}/com.googlecode.goclipse.build_pde"/>
        <delete dir="${build.dir}/features"/>
        <delete dir="${build.dir}/plugins"/>
        
        <delete dir="${build.dir}/workspace"/>
    </target>
    
    <!-- jenkins_build -->
    <target name="jenkins_build" depends="jenkins_init,setup,pde_build">
        <!-- all the work is done in the dependent targets -->
    </target>
    
    <!-- setup -->
    <target name="setup">
        <echo message="build dir is ${build.dir}"/>

        <!-- get the current svn revision number -->
        <exec executable="cmd" output="${build.dir}/svn_info.properties" osfamily="windows">
            <arg value="/c"/>
            <arg value="svn"/>
            <arg value="info"/>
            <arg value="https://goclipse.googlecode.com/svn/trunk"/>
        </exec>
        <exec executable="svn" output="${build.dir}/svn_info.properties" osfamily="unix">
            <arg value="info"/>
            <arg value="https://goclipse.googlecode.com/svn/trunk"/>
        </exec>
        
        <property file="${build.dir}/svn_info.properties" prefix="tempsvn"/>
        <delete file="${build.dir}/svn_info.properties"/>
        <property name="svn.revision" value="${tempsvn.Revision}"/>
        
        <get src="http://archive.eclipse.org/technology/epp/downloads/release/helios/R/eclipse-rcp-helios-win32.zip"
            dest="${build.dir}" 
            verbose="true"
            usetimestamp="true"/>
    
        <property name="eclipse.dir" value="${build.dir}/eclipse_36/eclipse"/>
        
        <unzip src="${build.dir}/eclipse-rcp-helios-win32.zip" dest="${eclipse.dir}/.." overwrite="false"/>    

        <!-- clean repo -->
        <delete dir="${build.dir}/buildRepo"/>
        <delete dir="${build.dir}/I.build"/>
        <delete dir="${build.dir}/workspace"/>
        <delete includes="goclipse-updatesite-*.zip" dir="${build.dir}"/>
    	
        <touch file="${build.dir}/features/goclipse_feature/feature.xml"/>
        
    	  <xmlproperty file="${build.dir}/features/goclipse_feature/feature.xml" collapseAttributes="true"/>
    	
        <echo message="Building svn revision ${svn.revision}"/>
        <echo message="GoClipse version ${feature.version}"/>
        <echo message="Building for Eclipse 3.6+"/>
    </target>
    
    <!-- pde_build -->
	  <target name="pde_build" depends="setup">
	      <mkdir dir="${build.dir}/buildRepo"/>
	      
	      <!-- invoke PDE -->
        <sequential>
            <java jar="${eclipse.dir}/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" fork="true" 
                  failonerror="false" errorproperty="pde.build.error">
                <arg value="-data" />
                <arg value="${build.dir}/workspace" />
                <arg value="-application" />
                <arg value="org.eclipse.ant.core.antRunner" />
                <arg value="-quiet" />
                <arg value="-f" />
                <arg value="${eclipse.dir}/plugins/org.eclipse.pde.build_3.6.0.v20100603/scripts/build.xml" />
                <arg value="-Dbuilder=${build.dir}/com.googlecode.goclipse.build_pde" />
                <arg value="-Dbuild.tmp=${build.dir}/tmp" />
                <arg value="-Dbuild.target=${eclipse.dir}" />
                <arg value="-Dbuild.stage=${build.dir}/stage" />
                <arg value="-DbuildDirectory=${build.dir}" />
                <arg value="-DbaseLocation=${eclipse.dir}" />
                <arg value="-Dbase=${build.dir}/base" />
                <arg value="-Dsvn.revision=${svn.revision}" />
                <arg value="-noinput" />
                <arg value="-vmargs" />
                <arg value="-Xms256M" />
                <arg value="-Xmx512M" />
            </java>
        </sequential>
        
        <echo message="PDE build exited: ${pde.build.error}" />
        
        <fail message="PDE build failed">
            <condition>
                <not>
                    <equals arg1="" arg2="${pde.build.error}" trim="true" />
                </not>
            </condition>
        </fail>
	  	  
	      <!-- use the P2 Publisher app to create a category in the update site -->
        <sequential>
            <java jar="${eclipse.dir}/plugins/org.eclipse.equinox.launcher_1.1.0.v20100507.jar" fork="true">
                <arg value="-data" />
                <arg value="${build.dir}/workspace" />
                <arg value="-application" />
                <arg value="org.eclipse.equinox.p2.publisher.CategoryPublisher" />
                
                <arg value="-artifactRepository" />
                <arg value="file:/${build.dir}/buildRepo" />
                <arg value="-metadataRepository" />
                <arg value="file:/${build.dir}/buildRepo" />
                <arg value="-source" />
                <arg value="${build.dir}/buildRepo" />
                
                <arg value="-categoryDefinition" />
                <arg value="file:/${build.dir}/com.googlecode.goclipse.build_pde/category.xml" />
                <arg value="-categoryQualifier" />
                <arg value="-compress" />
                
                <arg value="-vmargs" />
                <arg value="-Xms256M" />
                <arg value="-Xmx512M" />
            </java>
        </sequential>
	      
        <delete>
            <fileset dir="${build.dir}">
                <include name="assemble.goclipse_feature.*.xml"/>
                <include name="final*.properties"/>
                <include name="package.goclipse_feature.*.xml"/>
            </fileset>
        </delete>
	  	  
	  	  <!-- zip destfile="${build.dir}/updatesite-${feature.version}.zip" basedir="${build.dir}/buildRepo"/ -->
        <zip destfile="${build.dir}/goclipse-updatesite-v${svn.revision}.zip" basedir="${build.dir}/buildRepo"/>
	  </target>
	
</project>
